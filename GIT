What is Git?
Git is a distributed version control system (VCS) widely used for tracking changes in source code during software development.
It allows multiple developers to work on the same project simultaneously, track changes, and collaborate effectively. 
Git is essential for managing the lifecycle of a project, providing tools for branching, merging, and reverting changes, 
all while maintaining a history of the project’s progress.

Key Features of Git:

Distributed: Each user has the complete history of the project.
Branching and Merging: Create separate branches for features or fixes and merge them back into the main project.
Tracking Changes: Every change is recorded with commit messages and timestamps.
Collaboration: Multiple users can contribute to the project without overwriting each other's work.


GIT	                                    GITHUB
Software tool 	                        service
Installed on local system	              Hosted as a website
Manage different version of code	      Has a copy of local repo code
Command line interface to interact      GUI for interaction with the files
with file changes	


Important Git Concepts-->

Repository (Repo): A project folder tracked by Git. It can be local (on your computer) or remote (like on GitHub or GitLab).
Commit: A snapshot of your changes. It stores the state of your project at a specific point.
Branch: A separate line of development. The main branch (formerly master) is typically the default branch.
Staging Area: Where changes are stored before committing.
Remote Repository: A version of your repository stored on a server like GitHub or GitLab.
Merge: Combining branches together.
Clone: Making a local copy of a remote repository.

Basic Git Workflow-->

Initialize a repository: git init
Make changes: Modify files in the project.
Stage changes: git add <filename> (prepares files for commit)
Commit changes: git commit -m "commit message"
Push to a remote repository: git push

Git Commands Breakdown-->

1. Setup and Configuration

git --version: Check installed Git version.
git config --global user.name "Your Name": Set your username.
git config --global user.email "youremail@example.com": Set your email.

2. Repository Operations

git init [repository name]: Initialize a new Git repository in a directory.
git clone <repo-url>: Clone an existing repository from a remote server to your local machine.

3. Staging and Committing

git add <file>: Add specific file(s) to the staging area.
git add .: Add all changes in the current directory to the staging area.
git commit -m "commit message": Commit staged changes with a descriptive message.
git commit -am "commit message": Add and commit changes in one command.

4. Branching and Merging

git branch: List all branches in your repo.
git branch <branch-name>: Create a new branch.
git checkout <branch-name>: Switch to a different branch.
git checkout -b <branch-name>: Create a new branch and switch to it.
git merge <branch-name>: Merge a branch into the current branch.
git branch -d <branch-name>: Delete a branch.

5. Pushing and Pulling (Working with Remote Repositories)

git remote add origin <repo-url>: Add a remote repository.
git push: Push your changes to the remote repository.
git push -u origin <branch-name>: Push your branch to the remote repository and set it as upstream.
git pull: Fetch and integrate changes from the remote repository to your local repository.
git fetch: Download objects and refs from another repository without merging.

6. Viewing History and Changes

git log: View commit history.
git log --oneline: View a compact version of the commit history.
git diff: Show differences between working directory and staging area.
git diff --staged: Show differences between staged changes and the last commit.
git status: Show the state of the working directory and staging area (e.g., modified, added, or deleted files).

7. Undoing Changes

git reset <file>: Unstage a file.
git checkout -- <file>: Discard changes in the working directory.
git revert <commit-hash>: Revert a commit by creating a new commit that undoes the changes.
git reset --hard <commit-hash>: Reset the repository to a specific commit (destructive).
git reset --soft <commit-hash>: Reset to a specific commit but keep changes staged.

8. Tags

git tag <tag-name>: Tag a specific commit (used for marking releases).
git push origin <tag-name>: Push a tag to the remote repository.

9. Stashing (Temporarily Save Work)

git stash: Save the changes you’re currently working on without committing.
git stash pop: Reapply the stashed changes.
git stash list: Show all stashes.

10. Collaboration with Forks and Pull Requests

git fetch upstream: Fetch updates from the original repository when you've forked it.
git merge upstream/main: Merge upstream changes into your fork.
